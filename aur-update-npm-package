#!/bin/bash

# aur-update-npm-package
#
# This script automates the process of updating Arch Linux User Repository (AUR) packages
# that are based on npm packages. It checks for updates, downloads the new package,
# updates the corresponding PKGBUILD, and optionally pushes the changes to the AUR.
#
# Usage:
# aur-update-npm-package [--config <config_file>] [--publish]

main() {
  # Save the current directory
  original_dir=$(pwd)

# Function to extract version from package name
get_version() {
  # Extract version from filename using sed
  echo "${1}" | sed -E 's/.*-(v?[0-9]+\.[0-9]+\.[0-9]+)\.tgz/\1/'
}

# Function to push to AUR
push_to_aur() {
  local pkg_path="$1"
  cd "${pkg_path}" || { echo "Error: Unable to change to directory ${pkg_path}"; exit 1; }
  git add PKGBUILD .SRCINFO
  git commit -m "v${new_version}"
  git push origin master || { echo "Error: Git push operation failed."; exit 1; }
}


    # Check if the configuration file exists
    if [ ! -f "${config_file}" ]; then
      echo "Error: Configuration file '${config_file}' not found." >&2
      exit 1
    fi

    shift 2

# Check current path if no config file is specified
if [ ! -f "${config_file}" ]; then
  pkg_paths=(".")
else
  # Read paths from the configuration file
  readarray -t pkg_paths < "${config_file}"
fi

# Main script
for pkg_path in "${pkg_paths[@]}"; do
  # Check if the current directory is a Git repository
  if [ ! -d "${pkg_path}/.git" ]; then
    echo "Error: ${pkg_path} is not a Git repository."
    continue
  fi

  # Check if PKGBUILD exists
  if [ ! -f "${pkg_path}/PKGBUILD" ]; then
    echo "Error: PKGBUILD file not found in ${pkg_path}."
    continue
  fi

  # Source the PKGBUILD to get the current version and package name
  source "${pkg_path}/PKGBUILD"
  current_version="${pkgver}"

  # Check for updates
  new_version=$(npm show "${pkgname}" version)

  if [[ "${new_version}" != "${current_version}" ]]; then
    echo "Updating ${pkgname} from v${current_version} to v${new_version}"

    # Download the new package
    npm pack "${pkgname}@${new_version}" || { echo "Failed to download the package."; exit 1; }

    # Extract the new version from the downloaded package name
    new_version=$(get_version "$(ls -t ${pkg_path}/${pkgname}-*.tgz | head -n1)")

    # Update PKGBUILD
    sed -i "s/pkgver=${current_version}/pkgver=${new_version}/" PKGBUILD

    # Run updpkgsums to update sha256sums
    updpkgsums "${pkg_path}/PKGBUILD"

    # Update .SRCINFO
    makepkg --printsrcinfo > "${pkg_path}/.SRCINFO"

    # Push changes to AUR if --publish switch is specified
    if [[ "${1}" == "--publish" ]]; then
      push_to_aur "${pkg_path}"
    fi


  cd "${original_dir}" || { echo "Error: Unable to revert to the original directory" >&2; exit 1; }
}

# Trap to ensure the original directory is restored even if an error occurs
trap 'cd "${original_dir}" || { echo "Error: Unable to revert to the original directory" >&2; exit 1; }' EXIT

# Call the main function
main
